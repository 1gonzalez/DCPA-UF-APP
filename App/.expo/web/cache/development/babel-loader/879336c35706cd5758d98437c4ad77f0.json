{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport queryString from 'query-string';\nexport var geoCordStringify = function geoCordStringify(latitude, longitude) {\n  [latitude, longitude].map(function (coord) {\n    if (typeof coord !== 'number') {\n      throw new Error('Entered a non-number value for geo coordinates.');\n    }\n  });\n  return latitude + \",\" + longitude;\n};\nexport var validateTravelType = function validateTravelType(type) {\n  var TRAVEL_TYPE_ENUM = ['drive', 'walk', 'public_transport'];\n  var validType = TRAVEL_TYPE_ENUM.filter(function (validType) {\n    return validType === type;\n  });\n\n  if (!validType) {\n    throw new Error(\"Recieved \" + type + \", expected \" + TRAVEL_TYPE_ENUM);\n  }\n};\n\nvar cleanObject = function cleanObject(input) {\n  return Object.keys(input).reduce(function (acc, key, index) {\n    var currentValue = input[key];\n    return currentValue ? _extends({}, acc, _defineProperty({}, key, currentValue)) : acc;\n  }, {});\n};\n\nexport var createAppleParams = function createAppleParams(params) {\n  var travelTypeMap = {\n    drive: 'd',\n    walk: 'w',\n    public_transport: 'r'\n  };\n  var map = {\n    ll: params.coords,\n    z: params.zoom,\n    dirflg: travelTypeMap[params.travelType],\n    q: params.query,\n    saddr: params.start,\n    daddr: params.end\n  };\n  return cleanObject(map);\n};\nexport var createGoogleParams = function createGoogleParams(params) {\n  var travelTypeMap = {\n    drive: 'driving',\n    walk: 'walking',\n    public_transport: 'transit'\n  };\n  var map = {\n    origin: params.start,\n    destination: params.end,\n    travelmode: travelTypeMap[params.travelType],\n    zoom: params.zoom\n  };\n\n  if (params.navigate_mode === 'navigate') {\n    map.dir_action = 'navigate';\n  }\n\n  if (params.coords) {\n    map.center = params.coords;\n  } else {\n    map.query = params.query;\n  }\n\n  return cleanObject(map);\n};\nexport var createQueryParameters = function createQueryParameters(_ref) {\n  var latitude = _ref.latitude,\n      longitude = _ref.longitude,\n      _ref$zoom = _ref.zoom,\n      zoom = _ref$zoom === void 0 ? 15 : _ref$zoom,\n      _ref$start = _ref.start,\n      start = _ref$start === void 0 ? '' : _ref$start,\n      _ref$end = _ref.end,\n      end = _ref$end === void 0 ? '' : _ref$end,\n      _ref$query = _ref.query,\n      query = _ref$query === void 0 ? '' : _ref$query,\n      _ref$navigate_mode = _ref.navigate_mode,\n      navigate_mode = _ref$navigate_mode === void 0 ? 'preview' : _ref$navigate_mode,\n      _ref$travelType = _ref.travelType,\n      travelType = _ref$travelType === void 0 ? 'drive' : _ref$travelType;\n  validateTravelType(travelType);\n  var formatArguments = {\n    start: start,\n    end: end,\n    query: query,\n    navigate_mode: navigate_mode,\n    travelType: travelType,\n    zoom: zoom\n  };\n\n  if (latitude && longitude) {\n    formatArguments.coords = geoCordStringify(latitude, longitude);\n  }\n\n  return {\n    apple: createAppleParams(formatArguments),\n    google: createGoogleParams(formatArguments)\n  };\n};\nexport default function open(params) {\n  createOpenLink(params)();\n}\nexport function createOpenLink(_ref2) {\n  var provider = _ref2.provider,\n      params = _objectWithoutProperties(_ref2, [\"provider\"]);\n\n  if (!provider) {\n    defaultProvider = Platform.OS === 'ios' ? 'apple' : 'google';\n  }\n\n  var mapProvider = provider || defaultProvider;\n  var mapLink = createMapLink(_objectSpread({\n    provider: mapProvider\n  }, params));\n  return function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", Linking.openURL(mapLink).catch(function (err) {\n              return console.error('An error occurred', err);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n}\nexport function createMapLink(_ref3) {\n  var _ref3$provider = _ref3.provider,\n      provider = _ref3$provider === void 0 ? 'google' : _ref3$provider,\n      params = _objectWithoutProperties(_ref3, [\"provider\"]);\n\n  var link = {\n    google: 'https://www.google.com/maps/search/?api=1&',\n    apple: 'http://maps.apple.com/?'\n  };\n\n  if (params.latitude && params.longitude) {\n    link.google = 'https://www.google.com/maps/@?api=1&map_action=map&';\n\n    if (params.navigate_mode === 'navigate') {\n      console.warn(\"navigate_mode='navigate' only supports 'end' prop\");\n      params['navigate_mode'] = 'preview';\n    }\n  }\n\n  if (params.end) {\n    link.google = 'https://www.google.com/maps/dir/?api=1&';\n  }\n\n  if (params.start && params.navigate_mode === 'navigate') {\n    console.warn(\"navigate_mode='navigate' only supports 'end' prop\");\n  }\n\n  var queryParameters = createQueryParameters(params);\n  var appleQs = queryString.stringify(queryParameters.apple).replace(/%2C/g, ',');\n  var googleQs = queryString.stringify(queryParameters.google).replace(/%2C/g, ',');\n  link.google += googleQs;\n  link.apple += appleQs;\n  return link[provider];\n}","map":{"version":3,"sources":["/mnt/d/Users/Caputo/Desktop/IDEs/VSCode/CEN3031/Project/DCPA-UF-APP/App/node_modules/react-native-open-maps/index.js"],"names":["React","queryString","geoCordStringify","latitude","longitude","map","coord","Error","validateTravelType","type","TRAVEL_TYPE_ENUM","validType","filter","cleanObject","input","Object","keys","reduce","acc","key","index","currentValue","createAppleParams","params","travelTypeMap","drive","walk","public_transport","ll","coords","z","zoom","dirflg","travelType","q","query","saddr","start","daddr","end","createGoogleParams","origin","destination","travelmode","navigate_mode","dir_action","center","createQueryParameters","formatArguments","apple","google","open","createOpenLink","provider","defaultProvider","Platform","OS","mapProvider","mapLink","createMapLink","Linking","openURL","catch","err","console","error","link","warn","queryParameters","appleQs","stringify","replace","googleQs"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Linking, Platform } from 'react-native';\nimport queryString from 'query-string';\n\nexport const geoCordStringify = (latitude, longitude) => {\n\t[latitude, longitude].map(coord => {\n\t\tif (typeof coord !== 'number') {\n\t\t\tthrow new Error('Entered a non-number value for geo coordinates.');\n\t\t}\n\t});\n\n\treturn `${latitude},${longitude}`;\n}\n\nexport const validateTravelType = type => {\n\t// Google supports \"biking\", omitted for sake of compatability and user expectations\n\tconst TRAVEL_TYPE_ENUM = ['drive', 'walk', 'public_transport'];\n\tconst validType = TRAVEL_TYPE_ENUM.filter(validType => validType === type);\n\tif (!validType) {\n\t\tthrow new Error(`Recieved ${type}, expected ${TRAVEL_TYPE_ENUM}`);\n\t}\n}\n\n// cleanObject :: {} -> {}\n// Creates a new object that removes any empty values\nconst cleanObject = input => {\n\treturn Object.keys(input).reduce((acc, key, index,)=> {\n\t\tconst currentValue = input[key];\n\t\treturn (currentValue) ?\n\t\t\tObject.assign({}, acc, { [key]: currentValue }) : acc;\n\t}, {});\n}\n\n// Create apple parameters\nexport const createAppleParams = params => {\n\tconst travelTypeMap = {\n\t\tdrive: 'd',\n\t\twalk: 'w',\n\t\tpublic_transport: 'r'\n\t};\n\n\tconst map = {\n\t\tll: params.coords,\n\t\tz: params.zoom,\n\t\tdirflg: travelTypeMap[params.travelType],\n\t\tq: params.query,\n\t\tsaddr: params.start,\n\t\tdaddr: params.end\n\t}\n\n\treturn cleanObject(map);\n}\n\n// Create google parameters\nexport const createGoogleParams = params => {\n\tconst travelTypeMap = {\n\t\tdrive: 'driving',\n\t\twalk: 'walking',\n\t\tpublic_transport: 'transit'\n\t};\n\n\tconst map = {\n\t\torigin: params.start,\n\t\tdestination: params.end,\n\t\ttravelmode: travelTypeMap[params.travelType],\n\t\tzoom: params.zoom\n\t};\n\n\tif (params.navigate_mode === 'navigate') {\n\t\tmap.dir_action = 'navigate'\n\t}\n\n\tif (params.coords) {\n\t\tmap.center = params.coords;\n\t} else {\n\t\tmap.query = params.query;\n\t}\n\n\treturn cleanObject(map);\n}\n\n// The map portion API is defined here essentially\nexport const createQueryParameters = ({\n\tlatitude,\n\tlongitude,\n\tzoom = 15,\n\tstart = '',\n\tend = '',\n\tquery = '',\n\tnavigate_mode = 'preview', // preview has always being the default mode\n\ttravelType = 'drive'\n}) => {\n\tvalidateTravelType(travelType);\n\n\tconst formatArguments = {\n\t\tstart,\n\t\tend,\n\t\tquery,\n\t\tnavigate_mode,\n\t\ttravelType,\n\t\tzoom\n\t}\n\t\n\tif (latitude && longitude) {\n\t\tformatArguments.coords = geoCordStringify(latitude, longitude);\n\t}\n\n\treturn {\n\t\tapple: createAppleParams(formatArguments),\n\t\tgoogle: createGoogleParams(formatArguments)\n\t}\n};\n\nexport default function open(params) {\n\tcreateOpenLink(params)();\n}\n\nexport function createOpenLink({ provider, ...params }) {\n\t// Returns a delayed async function that opens when executed\n\tif (!provider) {\n\t\tdefaultProvider = (Platform.OS === 'ios') ? 'apple' : 'google';\n\t}\n\n\tlet mapProvider = provider || defaultProvider;\n\t// Allow override provider, otherwise use the default provider\n\tconst mapLink = createMapLink({ provider: mapProvider, ...params });\n\treturn async () => Linking.openURL(mapLink).catch(err => console.error('An error occurred', err));\n}\n\nexport function createMapLink({\n\tprovider = 'google',\n\t...params\n}) {\n\t// Assume query is first choice\n\tconst link = {\n\t\tgoogle: 'https://www.google.com/maps/search/?api=1&',\n\t\tapple: 'http://maps.apple.com/?'\n\t};\n\t\n\t// Display if lat and longitude is specified\n\tif (params.latitude && params.longitude) {\n\t\tlink.google = 'https://www.google.com/maps/@?api=1&map_action=map&';\n\n\t\t// if navigate_mode is navigate with latlng params\n\t\tif (params.navigate_mode === 'navigate') {\n\t\t\tconsole.warn(\"navigate_mode='navigate' only supports 'end' prop\")\n\t\t\tparams['navigate_mode'] = 'preview';\n\t\t}\n\t}\n\n\t// Directions if start and end is present\n\tif (params.end) {\n\t\tlink.google = 'https://www.google.com/maps/dir/?api=1&';\n\t}\n\n\t// throw an error to the developer\n\tif (params.start && params.navigate_mode === 'navigate') {\n\t\tconsole.warn(\"navigate_mode='navigate' only supports 'end' prop\")\n\t}\n\n\tconst queryParameters = createQueryParameters(params);\n\t// Escaped commas cause unusual error with Google map\n\tconst appleQs = queryString.stringify(queryParameters.apple).replace(/%2C/g, ',');\n\tconst googleQs = queryString.stringify(queryParameters.google).replace(/%2C/g, ',');\n\n\tlink.google += googleQs;\n\tlink.apple  += appleQs;\n\n\treturn link[provider];\n}\n"]},"metadata":{},"sourceType":"module"}