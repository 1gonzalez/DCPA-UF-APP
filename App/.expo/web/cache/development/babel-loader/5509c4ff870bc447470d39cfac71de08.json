{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/mnt/d/Users/Caputo/Desktop/IDEs/VSCode/CEN3031/Project/DCPA-UF-APP/App/Calendar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Agenda } from 'react-native-calendars';\nimport View from \"react-native-web/dist/exports/View\";\nimport React from 'react';\n\nvar Calendario = function (_React$Component) {\n  _inherits(Calendario, _React$Component);\n\n  var _super = _createSuper(Calendario);\n\n  function Calendario() {\n    _classCallCheck(this, Calendario);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Calendario, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(Agenda, {\n        items: {\n          '2012-05-22': [{\n            name: 'item 1 - any js object'\n          }],\n          '2012-05-23': [{\n            name: 'item 2 - any js object',\n            height: 80\n          }],\n          '2012-05-24': [],\n          '2012-05-25': [{\n            name: 'item 3 - any js object'\n          }, {\n            name: 'any js object'\n          }]\n        },\n        loadItemsForMonth: function loadItemsForMonth(month) {\n          console.log('trigger items loading');\n        },\n        onCalendarToggled: function onCalendarToggled(calendarOpened) {\n          console.log(calendarOpened);\n        },\n        onDayPress: function onDayPress(day) {\n          console.log('day pressed');\n        },\n        onDayChange: function onDayChange(day) {\n          console.log('day changed');\n        },\n        pastScrollRange: 50,\n        futureScrollRange: 50,\n        renderItem: function renderItem(item, firstItemInDay) {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 56\n            }\n          });\n        },\n        renderDay: function renderDay(day, item) {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 44\n            }\n          });\n        },\n        renderEmptyDate: function renderEmptyDate() {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 41\n            }\n          });\n        },\n        renderKnob: function renderKnob() {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 36\n            }\n          });\n        },\n        renderEmptyData: function renderEmptyData() {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 43\n            }\n          });\n        },\n        rowHasChanged: function rowHasChanged(r1, r2) {\n          return r1.text !== r2.text;\n        },\n        hideKnob: true,\n        disabledByDefault: true,\n        onRefresh: function onRefresh() {\n          return console.log('refreshing...');\n        },\n        refreshing: false,\n        refreshControl: null,\n        theme: {\n          agendaDayNumColor: 'red',\n          agendaDayTextcolor: 'red',\n          backgroundColor: '#ffac47',\n          calendarBackground: '#ffac47',\n          textSectionTitleColor: '#b6c1cd',\n          textSectionTitleDisabledColor: '#d9e1e8',\n          selectedDayBackgroundColor: '#00adf5',\n          selectedDayTextColor: 'red',\n          todayTextColor: '#00adf5',\n          disabledArrowColor: 'red',\n          textDisabledColor: '#d9e1e8',\n          dotColor: '#00adf5',\n          selectedDotColor: '#ffffff',\n          arrowColor: 'white',\n          monthTextColor: 'blue',\n          indicatorColor: 'blue',\n          dayTextColor: 'blue',\n          textDayFontFamily: 'monospace',\n          textMonthFontFamily: 'monospace',\n          textDayHeaderFontFamily: 'monospace',\n          textDayFontWeight: '500',\n          textMonthFontWeight: 'bold',\n          textDayHeaderFontWeight: '300',\n          textDayFontSize: 15,\n          textMonthFontSize: 15,\n          textDayHeaderFontSize: 15\n        },\n        style: {\n          borderWidth: 50,\n          borderColor: 'red',\n          height: 2500\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 9\n        }\n      });\n    }\n  }]);\n\n  return Calendario;\n}(React.Component);\n\nexport { Calendario as default };","map":{"version":3,"sources":["/mnt/d/Users/Caputo/Desktop/IDEs/VSCode/CEN3031/Project/DCPA-UF-APP/App/Calendar.js"],"names":["Agenda","React","Calendario","name","height","month","console","log","calendarOpened","day","item","firstItemInDay","r1","r2","text","agendaDayNumColor","agendaDayTextcolor","backgroundColor","calendarBackground","textSectionTitleColor","textSectionTitleDisabledColor","selectedDayBackgroundColor","selectedDayTextColor","todayTextColor","disabledArrowColor","textDisabledColor","dotColor","selectedDotColor","arrowColor","monthTextColor","indicatorColor","dayTextColor","textDayFontFamily","textMonthFontFamily","textDayHeaderFontFamily","textDayFontWeight","textMonthFontWeight","textDayHeaderFontWeight","textDayFontSize","textMonthFontSize","textDayHeaderFontSize","borderWidth","borderColor","Component"],"mappings":"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","sourcesContent":["import { Agenda } from 'react-native-calendars'; // 1.5.3\r\nimport { View } from 'react-native';\r\nimport React from 'react';\r\n\r\nexport default class Calendario extends React.Component {\r\n  render() {\r\n    return (\r\n        <Agenda\r\n        // The list of items that have to be displayed in agenda. If you want to render item as empty date\r\n        // the value of date key has to be an empty array []. If there exists no value for date key it is\r\n        // considered that the date in question is not yet loaded\r\n        items={{\r\n          '2012-05-22': [{name: 'item 1 - any js object'}],\r\n          '2012-05-23': [{name: 'item 2 - any js object', height: 80}],\r\n          '2012-05-24': [],\r\n          '2012-05-25': [{name: 'item 3 - any js object'}, {name: 'any js object'}]\r\n        }}\r\n        // Callback that gets called when items for a certain month should be loaded (month became visible)\r\n        loadItemsForMonth={(month) => {console.log('trigger items loading')}}\r\n        // Callback that fires when the calendar is opened or closed\r\n        onCalendarToggled={(calendarOpened) => {console.log(calendarOpened)}}\r\n        // Callback that gets called on day press\r\n        onDayPress={(day)=>{console.log('day pressed')}}\r\n        // Callback that gets called when day changes while scrolling agenda list\r\n        onDayChange={(day)=>{console.log('day changed')}}\r\n        // Max amount of months allowed to scroll to the past. Default = 50\r\n        pastScrollRange={50}\r\n        // Max amount of months allowed to scroll to the future. Default = 50\r\n        futureScrollRange={50}\r\n        // Specify how each item should be rendered in agenda\r\n        renderItem={(item, firstItemInDay) => {return (<View />);}}\r\n        // Specify how each date should be rendered. day can be undefined if the item is not first in that day.\r\n        renderDay={(day, item) => {return (<View />);}}\r\n        // Specify how empty date content with no items should be rendered\r\n        renderEmptyDate={() => {return (<View />);}}\r\n        // Specify how agenda knob should look like\r\n        renderKnob={() => {return (<View />);}}\r\n        // Specify what should be rendered instead of ActivityIndicator\r\n        renderEmptyData = {() => {return (<View />);}}\r\n        // Specify your item comparison function for increased performance\r\n        rowHasChanged={(r1, r2) => {return r1.text !== r2.text}}\r\n        // Hide knob button. Default = false\r\n        hideKnob={true}\r\n        // By default, agenda dates are marked if they have at least one item, but you can override this if needed\r\n        // If disabledByDefault={true} dates flagged as not disabled will be enabled. Default = false\r\n        disabledByDefault={true}\r\n        // If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly.\r\n        onRefresh={() => console.log('refreshing...')}\r\n        // Set this true while waiting for new data from a refresh\r\n        refreshing={false}\r\n        // Add a custom RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView.\r\n        refreshControl={null}\r\n        // Agenda theme\r\n        theme={{\r\n            agendaDayNumColor: 'red',\r\n            agendaDayTextcolor: 'red',\r\n            backgroundColor: '#ffac47',\r\n            calendarBackground: '#ffac47',\r\n            textSectionTitleColor: '#b6c1cd',\r\n            textSectionTitleDisabledColor: '#d9e1e8',\r\n            selectedDayBackgroundColor: '#00adf5',\r\n            selectedDayTextColor: 'red',\r\n            todayTextColor: '#00adf5',\r\n            disabledArrowColor: 'red',\r\n            textDisabledColor: '#d9e1e8',\r\n            dotColor: '#00adf5',\r\n            selectedDotColor: '#ffffff',\r\n            arrowColor: 'white',\r\n            monthTextColor: 'blue',\r\n            indicatorColor: 'blue',\r\n            dayTextColor: 'blue',\r\n            textDayFontFamily: 'monospace',\r\n            textMonthFontFamily: 'monospace',\r\n            textDayHeaderFontFamily: 'monospace',\r\n            textDayFontWeight: '500',\r\n            textMonthFontWeight: 'bold',\r\n            textDayHeaderFontWeight: '300',\r\n            textDayFontSize: 15,\r\n            textMonthFontSize: 15,\r\n            textDayHeaderFontSize: 15\r\n        }}\r\n        style={{\r\n            borderWidth: 50,\r\n            borderColor: 'red',\r\n            height: 2500,\r\n        }}\r\n        />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}