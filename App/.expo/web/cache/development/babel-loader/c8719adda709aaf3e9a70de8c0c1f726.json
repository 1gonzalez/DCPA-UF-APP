{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/mnt/d/Users/Caputo/Desktop/IDEs/VSCode/CEN3031/Project/DCPA-UF-APP/App/node_modules/react-native-modal/src/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from \"prop-types\";\nimport * as animatable from \"react-native-animatable\";\nimport { initializeAnimations, buildAnimations } from \"./utils\";\nimport styles from \"./index.style.js\";\ninitializeAnimations();\n\nvar reversePercentage = function reversePercentage(x) {\n  return -(x - 1);\n};\n\nvar ReactNativeModal = function (_Component) {\n  _inherits(ReactNativeModal, _Component);\n\n  var _super = _createSuper(ReactNativeModal);\n\n  function ReactNativeModal(props) {\n    var _this;\n\n    _classCallCheck(this, ReactNativeModal);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      showContent: true,\n      isVisible: false,\n      deviceWidth: Dimensions.get(\"window\").width,\n      deviceHeight: Dimensions.get(\"window\").height,\n      isSwipeable: _this.props.swipeDirection ? true : false,\n      pan: null\n    };\n    _this.isTransitioning = false;\n    _this.inSwipeClosingState = false;\n    _this.currentSwipingDirection = null;\n\n    _this.buildPanResponder = function () {\n      var animEvt = null;\n      _this.panResponder = PanResponder.create({\n        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {\n          if (!_this.props.propagateSwipe) {\n            var shouldSetPanResponder = Math.abs(gestureState.dx) >= 4 || Math.abs(gestureState.dy) >= 4;\n\n            if (shouldSetPanResponder && _this.props.onSwipeStart) {\n              _this.props.onSwipeStart();\n            }\n\n            _this.currentSwipingDirection = _this.getSwipingDirection(gestureState);\n            animEvt = _this.createAnimationEventForSwipe();\n            return shouldSetPanResponder;\n          }\n        },\n        onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n          if (_this.props.scrollTo && _this.props.scrollOffset > 0) {\n            return false;\n          }\n\n          if (_this.props.onSwipeStart) {\n            _this.props.onSwipeStart();\n          }\n\n          _this.currentSwipingDirection = null;\n          return true;\n        },\n        onPanResponderMove: function onPanResponderMove(evt, gestureState) {\n          if (!_this.currentSwipingDirection) {\n            if (gestureState.dx === 0 && gestureState.dy === 0) {\n              return;\n            }\n\n            _this.currentSwipingDirection = _this.getSwipingDirection(gestureState);\n            animEvt = _this.createAnimationEventForSwipe();\n          }\n\n          if (_this.isSwipeDirectionAllowed(gestureState)) {\n            var newOpacityFactor = 1 - _this.calcDistancePercentage(gestureState);\n\n            _this.backdropRef && _this.backdropRef.transitionTo({\n              opacity: _this.props.backdropOpacity * newOpacityFactor\n            });\n            animEvt(evt, gestureState);\n\n            if (_this.props.onSwipeMove) {\n              _this.props.onSwipeMove(newOpacityFactor);\n            }\n          } else {\n            if (_this.props.scrollTo) {\n              if (_this.props.scrollHorizontal) {\n                var offsetX = -gestureState.dx;\n\n                if (offsetX > _this.props.scrollOffsetMax) {\n                  offsetX -= (offsetX - _this.props.scrollOffsetMax) / 2;\n                }\n\n                _this.props.scrollTo({\n                  x: offsetX,\n                  animated: false\n                });\n              } else {\n                var offsetY = -gestureState.dy;\n\n                if (offsetY > _this.props.scrollOffsetMax) {\n                  offsetY -= (offsetY - _this.props.scrollOffsetMax) / 2;\n                }\n\n                _this.props.scrollTo({\n                  y: offsetY,\n                  animated: false\n                });\n              }\n            }\n          }\n        },\n        onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {\n          var accDistance = _this.getAccDistancePerDirection(gestureState);\n\n          if (accDistance > _this.props.swipeThreshold && _this.isSwipeDirectionAllowed(gestureState)) {\n            if (_this.props.onSwipeComplete) {\n              _this.inSwipeClosingState = true;\n\n              _this.props.onSwipeComplete();\n\n              return;\n            }\n\n            if (_this.props.onSwipe) {\n              _this.inSwipeClosingState = true;\n\n              _this.props.onSwipe();\n\n              return;\n            }\n          }\n\n          if (_this.props.onSwipeCancel) {\n            _this.props.onSwipeCancel();\n          }\n\n          _this.backdropRef.transitionTo({\n            opacity: _this.props.backdropOpacity\n          });\n\n          Animated.spring(_this.state.pan, {\n            toValue: {\n              x: 0,\n              y: 0\n            },\n            bounciness: 0\n          }).start();\n\n          if (_this.props.scrollOffset > _this.props.scrollOffsetMax) {\n            _this.props.scrollTo({\n              y: _this.props.scrollOffsetMax,\n              animated: true\n            });\n          }\n        }\n      });\n    };\n\n    _this.getAccDistancePerDirection = function (gestureState) {\n      switch (_this.currentSwipingDirection) {\n        case \"up\":\n          return -gestureState.dy;\n\n        case \"down\":\n          return gestureState.dy;\n\n        case \"right\":\n          return gestureState.dx;\n\n        case \"left\":\n          return -gestureState.dx;\n\n        default:\n          return 0;\n      }\n    };\n\n    _this.getSwipingDirection = function (gestureState) {\n      if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy)) {\n        return gestureState.dx > 0 ? \"right\" : \"left\";\n      }\n\n      return gestureState.dy > 0 ? \"down\" : \"up\";\n    };\n\n    _this.calcDistancePercentage = function (gestureState) {\n      switch (_this.currentSwipingDirection) {\n        case \"down\":\n          return (gestureState.moveY - gestureState.y0) / ((_this.props.deviceHeight || _this.state.deviceHeight) - gestureState.y0);\n\n        case \"up\":\n          return reversePercentage(gestureState.moveY / gestureState.y0);\n\n        case \"left\":\n          return reversePercentage(gestureState.moveX / gestureState.x0);\n\n        case \"right\":\n          return (gestureState.moveX - gestureState.x0) / ((_this.props.deviceWidth || _this.state.deviceWidth) - gestureState.x0);\n\n        default:\n          return 0;\n      }\n    };\n\n    _this.createAnimationEventForSwipe = function () {\n      if (_this.currentSwipingDirection === \"right\" || _this.currentSwipingDirection === \"left\") {\n        return Animated.event([null, {\n          dx: _this.state.pan.x\n        }]);\n      } else {\n        return Animated.event([null, {\n          dy: _this.state.pan.y\n        }]);\n      }\n    };\n\n    _this.isDirectionIncluded = function (direction) {\n      return Array.isArray(_this.props.swipeDirection) ? _this.props.swipeDirection.includes(direction) : _this.props.swipeDirection === direction;\n    };\n\n    _this.isSwipeDirectionAllowed = function (_ref) {\n      var dy = _ref.dy,\n          dx = _ref.dx;\n      var draggedDown = dy > 0;\n      var draggedUp = dy < 0;\n      var draggedLeft = dx < 0;\n      var draggedRight = dx > 0;\n\n      if (_this.currentSwipingDirection === \"up\" && _this.isDirectionIncluded(\"up\") && draggedUp) {\n        return true;\n      } else if (_this.currentSwipingDirection === \"down\" && _this.isDirectionIncluded(\"down\") && draggedDown) {\n        return true;\n      } else if (_this.currentSwipingDirection === \"right\" && _this.isDirectionIncluded(\"right\") && draggedRight) {\n        return true;\n      } else if (_this.currentSwipingDirection === \"left\" && _this.isDirectionIncluded(\"left\") && draggedLeft) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.handleDimensionsUpdate = function (dimensionsUpdate) {\n      if (!_this.props.deviceHeight && !_this.props.deviceWidth) {\n        var deviceWidth = Dimensions.get(\"window\").width;\n        var deviceHeight = Dimensions.get(\"window\").height;\n\n        if (deviceWidth !== _this.state.deviceWidth || deviceHeight !== _this.state.deviceHeight) {\n          _this.setState({\n            deviceWidth: deviceWidth,\n            deviceHeight: deviceHeight\n          });\n        }\n      }\n    };\n\n    _this.open = function () {\n      if (_this.isTransitioning) return;\n      _this.isTransitioning = true;\n\n      if (_this.backdropRef) {\n        _this.backdropRef.transitionTo({\n          opacity: _this.props.backdropOpacity\n        }, _this.props.backdropTransitionInTiming);\n      }\n\n      if (_this.state.isSwipeable) {\n        _this.state.pan.setValue({\n          x: 0,\n          y: 0\n        });\n      }\n\n      if (_this.contentRef) {\n        _this.props.onModalWillShow && _this.props.onModalWillShow();\n\n        _this.contentRef[_this.animationIn](_this.props.animationInTiming).then(function () {\n          _this.isTransitioning = false;\n\n          if (!_this.props.isVisible) {\n            _this.close();\n          } else {\n            _this.props.onModalShow();\n          }\n        });\n      }\n    };\n\n    _this.close = function () {\n      if (_this.isTransitioning) return;\n      _this.isTransitioning = true;\n\n      if (_this.backdropRef) {\n        _this.backdropRef.transitionTo({\n          opacity: 0\n        }, _this.props.backdropTransitionOutTiming);\n      }\n\n      var animationOut = _this.animationOut;\n\n      if (_this.inSwipeClosingState) {\n        _this.inSwipeClosingState = false;\n\n        if (_this.currentSwipingDirection === \"up\") {\n          animationOut = \"slideOutUp\";\n        } else if (_this.currentSwipingDirection === \"down\") {\n          animationOut = \"slideOutDown\";\n        } else if (_this.currentSwipingDirection === \"right\") {\n          animationOut = \"slideOutRight\";\n        } else if (_this.currentSwipingDirection === \"left\") {\n          animationOut = \"slideOutLeft\";\n        }\n      }\n\n      if (_this.contentRef) {\n        _this.props.onModalWillHide && _this.props.onModalWillHide();\n\n        _this.contentRef[animationOut](_this.props.animationOutTiming).then(function () {\n          _this.isTransitioning = false;\n\n          if (_this.props.isVisible) {\n            _this.open();\n          } else {\n            _this.setState({\n              showContent: false\n            }, function () {\n              _this.setState({\n                isVisible: false\n              }, function () {\n                _this.props.onModalHide();\n              });\n            });\n          }\n        });\n      }\n    };\n\n    var _buildAnimations = buildAnimations(props),\n        animationIn = _buildAnimations.animationIn,\n        _animationOut = _buildAnimations.animationOut;\n\n    _this.animationIn = animationIn;\n    _this.animationOut = _animationOut;\n\n    if (_this.state.isSwipeable) {\n      _this.state = _objectSpread(_objectSpread({}, _this.state), {}, {\n        pan: new Animated.ValueXY()\n      });\n\n      _this.buildPanResponder();\n    }\n\n    if (_this.props.isVisible) {\n      _this.state = _objectSpread(_objectSpread({}, _this.state), {}, {\n        isVisible: true,\n        showContent: true\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(ReactNativeModal, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (!this.state.isVisible && nextProps.isVisible) {\n        this.setState({\n          isVisible: true,\n          showContent: true\n        });\n      }\n\n      if (this.props.animationIn !== nextProps.animationIn || this.props.animationOut !== nextProps.animationOut) {\n        var _buildAnimations2 = buildAnimations(nextProps),\n            animationIn = _buildAnimations2.animationIn,\n            animationOut = _buildAnimations2.animationOut;\n\n        this.animationIn = animationIn;\n        this.animationOut = animationOut;\n      }\n\n      if (this.props.backdropOpacity !== nextProps.backdropOpacity && this.backdropRef) {\n        this.backdropRef.transitionTo({\n          opacity: nextProps.backdropOpacity\n        }, this.props.backdropTransitionInTiming);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.onSwipe) {\n        console.warn('`<Modal onSwipe=\"...\" />` is deprecated. Use `<Modal onSwipeComplete=\"...\" />` instead.');\n      }\n\n      if (this.state.isVisible) {\n        this.open();\n      }\n\n      DeviceEventEmitter.addListener(\"didUpdateDimensions\", this.handleDimensionsUpdate);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      DeviceEventEmitter.removeListener(\"didUpdateDimensions\", this.handleDimensionsUpdate);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.isVisible && !prevProps.isVisible) {\n        this.open();\n      } else if (!this.props.isVisible && prevProps.isVisible) {\n        this.close();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          animationIn = _this$props.animationIn,\n          animationInTiming = _this$props.animationInTiming,\n          animationOut = _this$props.animationOut,\n          animationOutTiming = _this$props.animationOutTiming,\n          avoidKeyboard = _this$props.avoidKeyboard,\n          coverScreen = _this$props.coverScreen,\n          hasBackdrop = _this$props.hasBackdrop,\n          backdropColor = _this$props.backdropColor,\n          backdropOpacity = _this$props.backdropOpacity,\n          backdropTransitionInTiming = _this$props.backdropTransitionInTiming,\n          backdropTransitionOutTiming = _this$props.backdropTransitionOutTiming,\n          children = _this$props.children,\n          deviceHeightProp = _this$props.deviceHeight,\n          deviceWidthProp = _this$props.deviceWidth,\n          isVisible = _this$props.isVisible,\n          onModalShow = _this$props.onModalShow,\n          onBackdropPress = _this$props.onBackdropPress,\n          onBackButtonPress = _this$props.onBackButtonPress,\n          useNativeDriver = _this$props.useNativeDriver,\n          propagateSwipe = _this$props.propagateSwipe,\n          style = _this$props.style,\n          otherProps = _objectWithoutProperties(_this$props, [\"animationIn\", \"animationInTiming\", \"animationOut\", \"animationOutTiming\", \"avoidKeyboard\", \"coverScreen\", \"hasBackdrop\", \"backdropColor\", \"backdropOpacity\", \"backdropTransitionInTiming\", \"backdropTransitionOutTiming\", \"children\", \"deviceHeight\", \"deviceWidth\", \"isVisible\", \"onModalShow\", \"onBackdropPress\", \"onBackButtonPress\", \"useNativeDriver\", \"propagateSwipe\", \"style\"]);\n\n      var deviceWidth = deviceWidthProp || this.state.deviceWidth;\n      var deviceHeight = deviceHeightProp || this.state.deviceHeight;\n      var computedStyle = [{\n        margin: deviceWidth * 0.05,\n        transform: [{\n          translateY: 0\n        }]\n      }, styles.content, style];\n      var panHandlers = {};\n      var panPosition = {};\n\n      if (this.state.isSwipeable) {\n        panHandlers = _objectSpread({}, this.panResponder.panHandlers);\n\n        if (useNativeDriver) {\n          panPosition = {\n            transform: this.state.pan.getTranslateTransform()\n          };\n        } else {\n          panPosition = this.state.pan.getLayout();\n        }\n      }\n\n      var _children = this.props.hideModalContentWhileAnimating && this.props.useNativeDriver && !this.state.showContent ? React.createElement(animatable.View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 9\n        }\n      }) : children;\n\n      var containerView = React.createElement(animatable.View, _extends({}, panHandlers, {\n        ref: function ref(_ref2) {\n          return _this2.contentRef = _ref2;\n        },\n        style: [panPosition, computedStyle],\n        pointerEvents: \"box-none\",\n        useNativeDriver: useNativeDriver\n      }, otherProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 7\n        }\n      }), _children);\n      var backdrop = React.createElement(TouchableWithoutFeedback, {\n        onPress: onBackdropPress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 7\n        }\n      }, React.createElement(animatable.View, {\n        ref: function ref(_ref3) {\n          return _this2.backdropRef = _ref3;\n        },\n        useNativeDriver: true,\n        style: [styles.backdrop, {\n          backgroundColor: this.state.showContent ? backdropColor : \"transparent\",\n          width: deviceWidth,\n          height: deviceHeight\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 9\n        }\n      }));\n      if (!coverScreen && this.state.isVisible) return React.createElement(View, {\n        pointerEvents: \"box-none\",\n        style: [styles.backdrop, {\n          zIndex: 2,\n          opacity: 1,\n          backgroundColor: \"transparent\"\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 9\n        }\n      }, hasBackdrop && backdrop, containerView);\n      return React.createElement(Modal, _extends({\n        transparent: true,\n        animationType: \"none\",\n        visible: this.state.isVisible,\n        onRequestClose: onBackButtonPress\n      }, otherProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 7\n        }\n      }), hasBackdrop && backdrop, avoidKeyboard && React.createElement(KeyboardAvoidingView, {\n        behavior: Platform.OS === \"ios\" ? \"padding\" : null,\n        pointerEvents: \"box-none\",\n        style: computedStyle.concat([{\n          margin: 0\n        }]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 11\n        }\n      }, containerView), !avoidKeyboard && containerView);\n    }\n  }]);\n\n  return ReactNativeModal;\n}(Component);\n\nReactNativeModal.propTypes = {\n  animationIn: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  animationInTiming: PropTypes.number,\n  animationOut: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  animationOutTiming: PropTypes.number,\n  avoidKeyboard: PropTypes.bool,\n  coverScreen: PropTypes.bool,\n  hasBackdrop: PropTypes.bool,\n  backdropColor: PropTypes.string,\n  backdropOpacity: PropTypes.number,\n  backdropTransitionInTiming: PropTypes.number,\n  backdropTransitionOutTiming: PropTypes.number,\n  children: PropTypes.node.isRequired,\n  deviceHeight: PropTypes.number,\n  deviceWidth: PropTypes.number,\n  isVisible: PropTypes.bool.isRequired,\n  hideModalContentWhileAnimating: PropTypes.bool,\n  propagateSwipe: PropTypes.bool,\n  onModalShow: PropTypes.func,\n  onModalWillShow: PropTypes.func,\n  onModalHide: PropTypes.func,\n  onModalWillHide: PropTypes.func,\n  onBackButtonPress: PropTypes.func,\n  onBackdropPress: PropTypes.func,\n  onSwipeStart: PropTypes.func,\n  onSwipeMove: PropTypes.func,\n  onSwipeComplete: PropTypes.func,\n  onSwipeCancel: PropTypes.func,\n  swipeThreshold: PropTypes.number,\n  swipeDirection: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOf([\"up\", \"down\", \"left\", \"right\"])), PropTypes.oneOf([\"up\", \"down\", \"left\", \"right\"])]),\n  useNativeDriver: PropTypes.bool,\n  style: PropTypes.any,\n  scrollTo: PropTypes.func,\n  scrollOffset: PropTypes.number,\n  scrollOffsetMax: PropTypes.number,\n  scrollHorizontal: PropTypes.bool,\n  supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf([\"portrait\", \"portrait-upside-down\", \"landscape\", \"landscape-left\", \"landscape-right\"]))\n};\nReactNativeModal.defaultProps = {\n  animationIn: \"slideInUp\",\n  animationInTiming: 300,\n  animationOut: \"slideOutDown\",\n  animationOutTiming: 300,\n  avoidKeyboard: false,\n  coverScreen: true,\n  hasBackdrop: true,\n  backdropColor: \"black\",\n  backdropOpacity: 0.7,\n  backdropTransitionInTiming: 300,\n  backdropTransitionOutTiming: 300,\n  onModalShow: function onModalShow() {\n    return null;\n  },\n  onModalWillShow: function onModalWillShow() {\n    return null;\n  },\n  deviceHeight: null,\n  deviceWidth: null,\n  onModalHide: function onModalHide() {\n    return null;\n  },\n  onModalWillHide: function onModalWillHide() {\n    return null;\n  },\n  isVisible: false,\n  hideModalContentWhileAnimating: false,\n  propagateSwipe: PropTypes.false,\n  onBackdropPress: function onBackdropPress() {\n    return null;\n  },\n  onBackButtonPress: function onBackButtonPress() {\n    return null;\n  },\n  swipeThreshold: 100,\n  useNativeDriver: false,\n  scrollTo: null,\n  scrollOffset: 0,\n  scrollOffsetMax: 0,\n  scrollHorizontal: false,\n  supportedOrientations: [\"portrait\", \"landscape\"]\n};\nexport default ReactNativeModal;\nexport { ReactNativeModal };","map":{"version":3,"sources":["/mnt/d/Users/Caputo/Desktop/IDEs/VSCode/CEN3031/Project/DCPA-UF-APP/App/node_modules/react-native-modal/src/index.js"],"names":["React","Component","PropTypes","animatable","initializeAnimations","buildAnimations","styles","reversePercentage","x","ReactNativeModal","props","state","showContent","isVisible","deviceWidth","Dimensions","get","width","deviceHeight","height","isSwipeable","swipeDirection","pan","isTransitioning","inSwipeClosingState","currentSwipingDirection","buildPanResponder","animEvt","panResponder","PanResponder","create","onMoveShouldSetPanResponder","evt","gestureState","propagateSwipe","shouldSetPanResponder","Math","abs","dx","dy","onSwipeStart","getSwipingDirection","createAnimationEventForSwipe","onStartShouldSetPanResponder","scrollTo","scrollOffset","onPanResponderMove","isSwipeDirectionAllowed","newOpacityFactor","calcDistancePercentage","backdropRef","transitionTo","opacity","backdropOpacity","onSwipeMove","scrollHorizontal","offsetX","scrollOffsetMax","animated","offsetY","y","onPanResponderRelease","accDistance","getAccDistancePerDirection","swipeThreshold","onSwipeComplete","onSwipe","onSwipeCancel","Animated","spring","toValue","bounciness","start","moveY","y0","moveX","x0","event","isDirectionIncluded","direction","Array","isArray","includes","draggedDown","draggedUp","draggedLeft","draggedRight","handleDimensionsUpdate","dimensionsUpdate","setState","open","backdropTransitionInTiming","setValue","contentRef","onModalWillShow","animationIn","animationInTiming","then","close","onModalShow","backdropTransitionOutTiming","animationOut","onModalWillHide","animationOutTiming","onModalHide","ValueXY","nextProps","console","warn","DeviceEventEmitter","addListener","removeListener","prevProps","prevState","avoidKeyboard","coverScreen","hasBackdrop","backdropColor","children","deviceHeightProp","deviceWidthProp","onBackdropPress","onBackButtonPress","useNativeDriver","style","otherProps","computedStyle","margin","transform","translateY","content","panHandlers","panPosition","getTranslateTransform","getLayout","_children","hideModalContentWhileAnimating","containerView","ref","backdrop","backgroundColor","zIndex","Platform","OS","concat","propTypes","oneOfType","string","object","number","bool","node","isRequired","func","arrayOf","oneOf","any","supportedOrientations","defaultProps","false"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Animated,\n  DeviceEventEmitter,\n  Dimensions,\n  KeyboardAvoidingView,\n  Modal,\n  PanResponder,\n  Platform,\n  TouchableWithoutFeedback,\n  View\n} from \"react-native\";\nimport PropTypes from \"prop-types\";\nimport * as animatable from \"react-native-animatable\";\nimport { initializeAnimations, buildAnimations } from \"./utils\";\n\nimport styles from \"./index.style.js\";\n\n// Override default react-native-animatable animations\ninitializeAnimations();\n\nconst reversePercentage = x => -(x - 1);\n\nclass ReactNativeModal extends Component {\n  static propTypes = {\n    animationIn: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    animationInTiming: PropTypes.number,\n    animationOut: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    animationOutTiming: PropTypes.number,\n    avoidKeyboard: PropTypes.bool,\n    coverScreen: PropTypes.bool,\n    hasBackdrop: PropTypes.bool,\n    backdropColor: PropTypes.string,\n    backdropOpacity: PropTypes.number,\n    backdropTransitionInTiming: PropTypes.number,\n    backdropTransitionOutTiming: PropTypes.number,\n    children: PropTypes.node.isRequired,\n    deviceHeight: PropTypes.number,\n    deviceWidth: PropTypes.number,\n    isVisible: PropTypes.bool.isRequired,\n    hideModalContentWhileAnimating: PropTypes.bool,\n    propagateSwipe: PropTypes.bool,\n    onModalShow: PropTypes.func,\n    onModalWillShow: PropTypes.func,\n    onModalHide: PropTypes.func,\n    onModalWillHide: PropTypes.func,\n    onBackButtonPress: PropTypes.func,\n    onBackdropPress: PropTypes.func,\n    onSwipeStart: PropTypes.func,\n    onSwipeMove: PropTypes.func,\n    onSwipeComplete: PropTypes.func,\n    onSwipeCancel: PropTypes.func,\n    swipeThreshold: PropTypes.number,\n    swipeDirection: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.oneOf([\"up\", \"down\", \"left\", \"right\"])),\n      PropTypes.oneOf([\"up\", \"down\", \"left\", \"right\"])\n    ]),\n    useNativeDriver: PropTypes.bool,\n    style: PropTypes.any,\n    scrollTo: PropTypes.func,\n    scrollOffset: PropTypes.number,\n    scrollOffsetMax: PropTypes.number,\n    scrollHorizontal: PropTypes.bool,\n    supportedOrientations: PropTypes.arrayOf(\n      PropTypes.oneOf([\n        \"portrait\",\n        \"portrait-upside-down\",\n        \"landscape\",\n        \"landscape-left\",\n        \"landscape-right\"\n      ])\n    )\n  };\n\n  static defaultProps = {\n    animationIn: \"slideInUp\",\n    animationInTiming: 300,\n    animationOut: \"slideOutDown\",\n    animationOutTiming: 300,\n    avoidKeyboard: false,\n    coverScreen: true,\n    hasBackdrop: true,\n    backdropColor: \"black\",\n    backdropOpacity: 0.7,\n    backdropTransitionInTiming: 300,\n    backdropTransitionOutTiming: 300,\n    onModalShow: () => null,\n    onModalWillShow: () => null,\n    deviceHeight: null,\n    deviceWidth: null,\n    onModalHide: () => null,\n    onModalWillHide: () => null,\n    isVisible: false,\n    hideModalContentWhileAnimating: false,\n    propagateSwipe: PropTypes.false,\n    onBackdropPress: () => null,\n    onBackButtonPress: () => null,\n    swipeThreshold: 100,\n    useNativeDriver: false,\n    scrollTo: null,\n    scrollOffset: 0,\n    scrollOffsetMax: 0,\n    scrollHorizontal: false,\n    supportedOrientations: [\"portrait\", \"landscape\"]\n  };\n\n  // We use an internal state for keeping track of the modal visibility: this allows us to keep\n  // the modal visible during the exit animation, even if the user has already change the\n  // isVisible prop to false.\n  // We store in the state the device width and height so that we can update the modal on\n  // device rotation.\n  state = {\n    showContent: true,\n    isVisible: false,\n    deviceWidth: Dimensions.get(\"window\").width,\n    deviceHeight: Dimensions.get(\"window\").height,\n    isSwipeable: this.props.swipeDirection ? true : false,\n    pan: null\n  };\n\n  isTransitioning = false;\n  inSwipeClosingState = false;\n  currentSwipingDirection = null;\n\n  constructor(props) {\n    super(props);\n    const { animationIn, animationOut } = buildAnimations(props);\n    this.animationIn = animationIn;\n    this.animationOut = animationOut;\n    if (this.state.isSwipeable) {\n      this.state = { ...this.state, pan: new Animated.ValueXY() };\n      this.buildPanResponder();\n    }\n    if (this.props.isVisible) {\n      this.state = {\n        ...this.state,\n        isVisible: true,\n        showContent: true\n      };\n    }\n  }\n\n  // TODO: Stop using componentWillReceiveProps\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!this.state.isVisible && nextProps.isVisible) {\n      this.setState({ isVisible: true, showContent: true });\n    }\n    if (\n      this.props.animationIn !== nextProps.animationIn ||\n      this.props.animationOut !== nextProps.animationOut\n    ) {\n      const { animationIn, animationOut } = buildAnimations(nextProps);\n      this.animationIn = animationIn;\n      this.animationOut = animationOut;\n    }\n    if (\n      this.props.backdropOpacity !== nextProps.backdropOpacity &&\n      this.backdropRef\n    ) {\n      this.backdropRef.transitionTo(\n        { opacity: nextProps.backdropOpacity },\n        this.props.backdropTransitionInTiming\n      );\n    }\n  }\n\n  componentDidMount() {\n    // Show deprecation message\n    if (this.props.onSwipe) {\n      console.warn(\n        '`<Modal onSwipe=\"...\" />` is deprecated. Use `<Modal onSwipeComplete=\"...\" />` instead.'\n      );\n    }\n    if (this.state.isVisible) {\n      this.open();\n    }\n    DeviceEventEmitter.addListener(\n      \"didUpdateDimensions\",\n      this.handleDimensionsUpdate\n    );\n  }\n\n  componentWillUnmount() {\n    DeviceEventEmitter.removeListener(\n      \"didUpdateDimensions\",\n      this.handleDimensionsUpdate\n    );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // On modal open request, we slide the view up and fade in the backdrop\n    if (this.props.isVisible && !prevProps.isVisible) {\n      this.open();\n    } else if (!this.props.isVisible && prevProps.isVisible) {\n      // On modal close request, we slide the view down and fade out the backdrop\n      this.close();\n    }\n  }\n\n  buildPanResponder = () => {\n    let animEvt = null;\n\n    this.panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: (evt, gestureState) => {\n        // Use propagateSwipe to allow inner content to scroll. See PR:\n        // https://github.com/react-native-community/react-native-modal/pull/246\n        if (!this.props.propagateSwipe) {\n          // The number \"4\" is just a good tradeoff to make the panResponder\n          // work correctly even when the modal has touchable buttons.\n          // For reference:\n          // https://github.com/react-native-community/react-native-modal/pull/197\n          const shouldSetPanResponder =\n            Math.abs(gestureState.dx) >= 4 || Math.abs(gestureState.dy) >= 4;\n          if (shouldSetPanResponder && this.props.onSwipeStart) {\n            this.props.onSwipeStart();\n          }\n\n          this.currentSwipingDirection = this.getSwipingDirection(gestureState);\n          animEvt = this.createAnimationEventForSwipe();\n          return shouldSetPanResponder;\n        }\n      },\n      onStartShouldSetPanResponder: () => {\n        if (this.props.scrollTo && this.props.scrollOffset > 0) {\n          return false; // user needs to be able to scroll content back up\n        }\n        if (this.props.onSwipeStart) {\n          this.props.onSwipeStart();\n        }\n\n        // Cleared so that onPanResponderMove can wait to have some delta\n        // to work with\n        this.currentSwipingDirection = null;\n        return true;\n      },\n      onPanResponderMove: (evt, gestureState) => {\n        // Using onStartShouldSetPanResponder we don't have any delta so we don't know\n        // The direction to which the user is swiping until some move have been done\n        if (!this.currentSwipingDirection) {\n          if (gestureState.dx === 0 && gestureState.dy === 0) {\n            return;\n          }\n\n          this.currentSwipingDirection = this.getSwipingDirection(gestureState);\n          animEvt = this.createAnimationEventForSwipe();\n        }\n\n        if (this.isSwipeDirectionAllowed(gestureState)) {\n          // Dim the background while swiping the modal\n          const newOpacityFactor =\n            1 - this.calcDistancePercentage(gestureState);\n\n          this.backdropRef &&\n            this.backdropRef.transitionTo({\n              opacity: this.props.backdropOpacity * newOpacityFactor\n            });\n\n          animEvt(evt, gestureState);\n\n          if (this.props.onSwipeMove) {\n            this.props.onSwipeMove(newOpacityFactor);\n          }\n        } else {\n          if (this.props.scrollTo) {\n            if (this.props.scrollHorizontal) {\n              let offsetX = -gestureState.dx;\n              if (offsetX > this.props.scrollOffsetMax) {\n                offsetX -= (offsetX - this.props.scrollOffsetMax) / 2;\n              }\n\n              this.props.scrollTo({ x: offsetX, animated: false });\n            } else {\n              let offsetY = -gestureState.dy;\n              if (offsetY > this.props.scrollOffsetMax) {\n                offsetY -= (offsetY - this.props.scrollOffsetMax) / 2;\n              }\n\n              this.props.scrollTo({ y: offsetY, animated: false });\n            }\n          }\n        }\n      },\n      onPanResponderRelease: (evt, gestureState) => {\n        // Call the onSwipe prop if the threshold has been exceeded on the right direction\n        const accDistance = this.getAccDistancePerDirection(gestureState);\n        if (\n          accDistance > this.props.swipeThreshold &&\n          this.isSwipeDirectionAllowed(gestureState)\n        ) {\n          if (this.props.onSwipeComplete) {\n            this.inSwipeClosingState = true;\n            this.props.onSwipeComplete();\n            return;\n          }\n          // Deprecated. Remove later.\n          if (this.props.onSwipe) {\n            this.inSwipeClosingState = true;\n            this.props.onSwipe();\n            return;\n          }\n        }\n\n        //Reset backdrop opacity and modal position\n        if (this.props.onSwipeCancel) {\n          this.props.onSwipeCancel();\n        }\n\n        this.backdropRef.transitionTo({\n          opacity: this.props.backdropOpacity\n        });\n\n        Animated.spring(this.state.pan, {\n          toValue: { x: 0, y: 0 },\n          bounciness: 0\n        }).start();\n        if (this.props.scrollOffset > this.props.scrollOffsetMax) {\n          this.props.scrollTo({\n            y: this.props.scrollOffsetMax,\n            animated: true\n          });\n        }\n      }\n    });\n  };\n\n  getAccDistancePerDirection = gestureState => {\n    switch (this.currentSwipingDirection) {\n      case \"up\":\n        return -gestureState.dy;\n      case \"down\":\n        return gestureState.dy;\n      case \"right\":\n        return gestureState.dx;\n      case \"left\":\n        return -gestureState.dx;\n      default:\n        return 0;\n    }\n  };\n\n  getSwipingDirection = gestureState => {\n    if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy)) {\n      return gestureState.dx > 0 ? \"right\" : \"left\";\n    }\n\n    return gestureState.dy > 0 ? \"down\" : \"up\";\n  };\n\n  calcDistancePercentage = gestureState => {\n    switch (this.currentSwipingDirection) {\n      case \"down\":\n        return (\n          (gestureState.moveY - gestureState.y0) /\n          ((this.props.deviceHeight || this.state.deviceHeight) -\n            gestureState.y0)\n        );\n      case \"up\":\n        return reversePercentage(gestureState.moveY / gestureState.y0);\n      case \"left\":\n        return reversePercentage(gestureState.moveX / gestureState.x0);\n      case \"right\":\n        return (\n          (gestureState.moveX - gestureState.x0) /\n          ((this.props.deviceWidth || this.state.deviceWidth) - gestureState.x0)\n        );\n\n      default:\n        return 0;\n    }\n  };\n\n  createAnimationEventForSwipe = () => {\n    if (\n      this.currentSwipingDirection === \"right\" ||\n      this.currentSwipingDirection === \"left\"\n    ) {\n      return Animated.event([null, { dx: this.state.pan.x }]);\n    } else {\n      return Animated.event([null, { dy: this.state.pan.y }]);\n    }\n  };\n\n  isDirectionIncluded = direction => {\n    return Array.isArray(this.props.swipeDirection)\n      ? this.props.swipeDirection.includes(direction)\n      : this.props.swipeDirection === direction;\n  };\n\n  isSwipeDirectionAllowed = ({ dy, dx }) => {\n    const draggedDown = dy > 0;\n    const draggedUp = dy < 0;\n    const draggedLeft = dx < 0;\n    const draggedRight = dx > 0;\n\n    if (\n      this.currentSwipingDirection === \"up\" &&\n      this.isDirectionIncluded(\"up\") &&\n      draggedUp\n    ) {\n      return true;\n    } else if (\n      this.currentSwipingDirection === \"down\" &&\n      this.isDirectionIncluded(\"down\") &&\n      draggedDown\n    ) {\n      return true;\n    } else if (\n      this.currentSwipingDirection === \"right\" &&\n      this.isDirectionIncluded(\"right\") &&\n      draggedRight\n    ) {\n      return true;\n    } else if (\n      this.currentSwipingDirection === \"left\" &&\n      this.isDirectionIncluded(\"left\") &&\n      draggedLeft\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  handleDimensionsUpdate = dimensionsUpdate => {\n    if (!this.props.deviceHeight && !this.props.deviceWidth) {\n      // Here we update the device dimensions in the state if the layout changed\n      // (triggering a render)\n      const deviceWidth = Dimensions.get(\"window\").width;\n      const deviceHeight = Dimensions.get(\"window\").height;\n      if (\n        deviceWidth !== this.state.deviceWidth ||\n        deviceHeight !== this.state.deviceHeight\n      ) {\n        this.setState({ deviceWidth, deviceHeight });\n      }\n    }\n  };\n\n  open = () => {\n    if (this.isTransitioning) return;\n    this.isTransitioning = true;\n    if (this.backdropRef) {\n      this.backdropRef.transitionTo(\n        { opacity: this.props.backdropOpacity },\n        this.props.backdropTransitionInTiming\n      );\n    }\n\n    // This is for resetting the pan position,otherwise the modal gets stuck\n    // at the last released position when you try to open it.\n    // TODO: Could certainly be improved - no idea for the moment.\n    if (this.state.isSwipeable) {\n      this.state.pan.setValue({ x: 0, y: 0 });\n    }\n\n    if (this.contentRef) {\n      this.props.onModalWillShow && this.props.onModalWillShow();\n      this.contentRef[this.animationIn](this.props.animationInTiming).then(\n        () => {\n          this.isTransitioning = false;\n          if (!this.props.isVisible) {\n            this.close();\n          } else {\n            this.props.onModalShow();\n          }\n        }\n      );\n    }\n  };\n\n  close = () => {\n    if (this.isTransitioning) return;\n    this.isTransitioning = true;\n    if (this.backdropRef) {\n      this.backdropRef.transitionTo(\n        { opacity: 0 },\n        this.props.backdropTransitionOutTiming\n      );\n    }\n\n    let animationOut = this.animationOut;\n\n    if (this.inSwipeClosingState) {\n      this.inSwipeClosingState = false;\n      if (this.currentSwipingDirection === \"up\") {\n        animationOut = \"slideOutUp\";\n      } else if (this.currentSwipingDirection === \"down\") {\n        animationOut = \"slideOutDown\";\n      } else if (this.currentSwipingDirection === \"right\") {\n        animationOut = \"slideOutRight\";\n      } else if (this.currentSwipingDirection === \"left\") {\n        animationOut = \"slideOutLeft\";\n      }\n    }\n\n    if (this.contentRef) {\n      this.props.onModalWillHide && this.props.onModalWillHide();\n      this.contentRef[animationOut](this.props.animationOutTiming).then(() => {\n        this.isTransitioning = false;\n        if (this.props.isVisible) {\n          this.open();\n        } else {\n          this.setState(\n            {\n              showContent: false\n            },\n            () => {\n              this.setState(\n                {\n                  isVisible: false\n                },\n                () => {\n                  this.props.onModalHide();\n                }\n              );\n            }\n          );\n        }\n      });\n    }\n  };\n\n  render() {\n    const {\n      animationIn,\n      animationInTiming,\n      animationOut,\n      animationOutTiming,\n      avoidKeyboard,\n      coverScreen,\n      hasBackdrop,\n      backdropColor,\n      backdropOpacity,\n      backdropTransitionInTiming,\n      backdropTransitionOutTiming,\n      children,\n      deviceHeight: deviceHeightProp,\n      deviceWidth: deviceWidthProp,\n      isVisible,\n      onModalShow,\n      onBackdropPress,\n      onBackButtonPress,\n      useNativeDriver,\n      propagateSwipe,\n      style,\n      ...otherProps\n    } = this.props;\n    const deviceWidth = deviceWidthProp || this.state.deviceWidth;\n    const deviceHeight = deviceHeightProp || this.state.deviceHeight;\n\n    const computedStyle = [\n      { margin: deviceWidth * 0.05, transform: [{ translateY: 0 }] },\n      styles.content,\n      style\n    ];\n\n    let panHandlers = {};\n    let panPosition = {};\n    if (this.state.isSwipeable) {\n      panHandlers = { ...this.panResponder.panHandlers };\n\n      if (useNativeDriver) {\n        panPosition = {\n          transform: this.state.pan.getTranslateTransform()\n        };\n      } else {\n        panPosition = this.state.pan.getLayout();\n      }\n    }\n\n    const _children =\n      this.props.hideModalContentWhileAnimating &&\n      this.props.useNativeDriver &&\n      !this.state.showContent ? (\n        <animatable.View />\n      ) : (\n        children\n      );\n    const containerView = (\n      <animatable.View\n        {...panHandlers}\n        ref={ref => (this.contentRef = ref)}\n        style={[panPosition, computedStyle]}\n        pointerEvents=\"box-none\"\n        useNativeDriver={useNativeDriver}\n        {...otherProps}\n      >\n        {_children}\n      </animatable.View>\n    );\n\n    const backdrop = (\n      <TouchableWithoutFeedback onPress={onBackdropPress}>\n        <animatable.View\n          ref={ref => (this.backdropRef = ref)}\n          useNativeDriver={true}\n          style={[\n            styles.backdrop,\n            {\n              backgroundColor: this.state.showContent\n                ? backdropColor\n                : \"transparent\",\n              width: deviceWidth,\n              height: deviceHeight\n            }\n          ]}\n        />\n      </TouchableWithoutFeedback>\n    );\n\n    if (!coverScreen && this.state.isVisible)\n      return (\n        <View\n          pointerEvents=\"box-none\"\n          style={[\n            styles.backdrop,\n            { zIndex: 2, opacity: 1, backgroundColor: \"transparent\" }\n          ]}\n        >\n          {hasBackdrop && backdrop}\n          {containerView}\n        </View>\n      );\n\n    return (\n      <Modal\n        transparent={true}\n        animationType={\"none\"}\n        visible={this.state.isVisible}\n        onRequestClose={onBackButtonPress}\n        {...otherProps}\n      >\n        {hasBackdrop && backdrop}\n\n        {avoidKeyboard && (\n          <KeyboardAvoidingView\n            behavior={Platform.OS === \"ios\" ? \"padding\" : null}\n            pointerEvents=\"box-none\"\n            style={computedStyle.concat([{ margin: 0 }])}\n          >\n            {containerView}\n          </KeyboardAvoidingView>\n        )}\n\n        {!avoidKeyboard && containerView}\n      </Modal>\n    );\n  }\n}\n\nexport default ReactNativeModal;\nexport { ReactNativeModal };\n"]},"metadata":{},"sourceType":"module"}