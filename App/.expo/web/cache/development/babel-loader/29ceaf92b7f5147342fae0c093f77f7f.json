{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/mnt/d/Users/Caputo/Desktop/IDEs/VSCode/CEN3031/Project/DCPA-UF-APP/App/Calendar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Calendar } from 'react-native-calendars';\nimport View from \"react-native-web/dist/exports/View\";\nimport React from 'react';\n\nvar Calendario = function (_React$Component) {\n  _inherits(Calendario, _React$Component);\n\n  var _super = _createSuper(Calendario);\n\n  function Calendario() {\n    _classCallCheck(this, Calendario);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Calendario, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          paddingTop: 50,\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 7\n        }\n      }, React.createElement(Calendar, {\n        minDate: '2012-05-10',\n        maxDate: '2012-05-30',\n        onDayPress: function onDayPress(day) {\n          console.log('selected day', day);\n        },\n        monthFormat: 'yyyy MM',\n        onMonthChange: function onMonthChange(month) {\n          console.log('month changed', month);\n        },\n        hideArrows: true,\n        hideExtraDays: true,\n        disableMonthChange: true,\n        firstDay: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Calendario;\n}(React.Component);\n\nexport { Calendario as default };","map":{"version":3,"sources":["/mnt/d/Users/Caputo/Desktop/IDEs/VSCode/CEN3031/Project/DCPA-UF-APP/App/Calendar.js"],"names":["Calendar","React","Calendario","paddingTop","flex","day","console","log","month","Component"],"mappings":";;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,wBAAzB;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;IAEqBC,U;;;;;;;;;;;;;WACnB,kBAAS;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAE,EAAd;AAAkBC,UAAAA,IAAI,EAAE;AAAxB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAGE,QAAA,OAAO,EAAE,YAHX;AAKE,QAAA,OAAO,EAAE,YALX;AAOE,QAAA,UAAU,EAAE,oBAAAC,GAAG,EAAI;AACjBC,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AACD,SATH;AAWE,QAAA,WAAW,EAAE,SAXf;AAaE,QAAA,aAAa,EAAE,uBAAAG,KAAK,EAAI;AACtBF,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,KAA7B;AACD,SAfH;AAiBE,QAAA,UAAU,EAAE,IAjBd;AAmBE,QAAA,aAAa,EAAE,IAnBjB;AAsBE,QAAA,kBAAkB,EAAE,IAtBtB;AAwBE,QAAA,QAAQ,EAAE,CAxBZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AA8BD;;;;EAhCqCP,KAAK,CAACQ,S;;SAAzBP,U","sourcesContent":["import { Calendar } from 'react-native-calendars'; // 1.5.3\r\nimport { View } from 'react-native';\r\nimport React from 'react';\r\n\r\nexport default class Calendario extends React.Component {\r\n  render() {\r\n    return (\r\n      <View style={{ paddingTop: 50, flex: 1 }}>\r\n        <Calendar\r\n          // Initially visible month. Default = Date()\r\n          // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n          minDate={'2012-05-10'}\r\n          // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n          maxDate={'2012-05-30'}\r\n          // Handler which gets executed on day press. Default = undefined\r\n          onDayPress={day => {\r\n            console.log('selected day', day);\r\n          }}\r\n          // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\r\n          monthFormat={'yyyy MM'}\r\n          // Handler which gets executed when visible month changes in calendar. Default = undefined\r\n          onMonthChange={month => {\r\n            console.log('month changed', month);\r\n          }}\r\n          // Hide month navigation arrows. Default = false\r\n          hideArrows={true}\r\n          // Do not show days of other months in month page. Default = false\r\n          hideExtraDays={true}\r\n          // If hideArrows=false and hideExtraDays=false do not swich month when tapping on greyed out\r\n          // day from another month that is visible in calendar page. Default = false\r\n          disableMonthChange={true}\r\n          // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday.\r\n          firstDay={1}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}