{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/mnt/d/Users/Caputo/Desktop/IDEs/VSCode/CEN3031/Project/DCPA-UF-APP/App/Calendar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { CalendarList, Agenda } from 'react-native-calendars';\nimport View from \"react-native-web/dist/exports/View\";\nimport React from 'react';\n\nvar Calendario = function (_React$Component) {\n  _inherits(Calendario, _React$Component);\n\n  var _super = _createSuper(Calendario);\n\n  function Calendario() {\n    _classCallCheck(this, Calendario);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Calendario, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(Agenda, {\n        loadItemsForMonth: function loadItemsForMonth(month) {\n          console.log('trigger items loading');\n        },\n        onCalendarToggled: function onCalendarToggled(calendarOpened) {\n          console.log(calendarOpened);\n        },\n        onDayPress: function onDayPress(day) {\n          console.log('day pressed');\n        },\n        onDayChange: function onDayChange(day) {\n          console.log('day changed');\n        },\n        selected: '2012-05-16',\n        minDate: '2012-05-10',\n        maxDate: '2012-05-30',\n        pastScrollRange: 50,\n        futureScrollRange: 50,\n        renderItem: function renderItem(item, firstItemInDay) {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 50\n            }\n          });\n        },\n        renderDay: function renderDay(day, item) {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 38\n            }\n          });\n        },\n        renderEmptyDate: function renderEmptyDate() {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 35\n            }\n          });\n        },\n        renderKnob: function renderKnob() {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 30\n            }\n          });\n        },\n        renderEmptyData: function renderEmptyData() {\n          return React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 37\n            }\n          });\n        },\n        rowHasChanged: function rowHasChanged(r1, r2) {\n          return r1.text !== r2.text;\n        },\n        hideKnob: true,\n        markedDates: {\n          '2012-05-16': {\n            selected: true,\n            marked: true\n          },\n          '2012-05-17': {\n            marked: true\n          },\n          '2012-05-18': {\n            disabled: true\n          }\n        },\n        disabledByDefault: true,\n        onRefresh: function onRefresh() {\n          return console.log('refreshing...');\n        },\n        refreshing: false,\n        refreshControl: null,\n        theme: {\n          agendaDayTextColor: 'yellow',\n          agendaDayNumColor: 'green',\n          agendaTodayColor: 'red',\n          agendaKnobColor: 'blue'\n        },\n        style: {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 9\n        }\n      });\n    }\n  }]);\n\n  return Calendario;\n}(React.Component);\n\nexport { Calendario as default };","map":{"version":3,"sources":["/mnt/d/Users/Caputo/Desktop/IDEs/VSCode/CEN3031/Project/DCPA-UF-APP/App/Calendar.js"],"names":["CalendarList","Agenda","React","Calendario","month","console","log","calendarOpened","day","item","firstItemInDay","r1","r2","text","selected","marked","disabled","agendaDayTextColor","agendaDayNumColor","agendaTodayColor","agendaKnobColor","Component"],"mappings":";;;;;;;;;;;AAAA,SAASA,YAAT,EAAuBC,MAAvB,QAAoC,wBAApC;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;IAEqBC,U;;;;;;;;;;;;;WACnB,kBAAS;AAAA;;AACP,aACI,oBAAC,MAAD;AAKN,QAAA,iBAAiB,EAAE,2BAACC,KAAD,EAAW;AAACC,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAAqC,SAL9D;AAON,QAAA,iBAAiB,EAAE,2BAACC,cAAD,EAAoB;AAACF,UAAAA,OAAO,CAACC,GAAR,CAAYC,cAAZ;AAA4B,SAP9D;AASN,QAAA,UAAU,EAAE,oBAACC,GAAD,EAAO;AAACH,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAA2B,SATzC;AAWN,QAAA,WAAW,EAAE,qBAACE,GAAD,EAAO;AAACH,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAA2B,SAX1C;AAaN,QAAA,QAAQ,EAAE,YAbJ;AAeN,QAAA,OAAO,EAAE,YAfH;AAiBN,QAAA,OAAO,EAAE,YAjBH;AAmBN,QAAA,eAAe,EAAE,EAnBX;AAqBN,QAAA,iBAAiB,EAAE,EArBb;AAuBN,QAAA,UAAU,EAAE,oBAACG,IAAD,EAAOC,cAAP,EAA0B;AAAC,iBAAQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAAmB,SAvBpD;AAyBN,QAAA,SAAS,EAAE,mBAACF,GAAD,EAAMC,IAAN,EAAe;AAAC,iBAAQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAAmB,SAzBxC;AA2BN,QAAA,eAAe,EAAE,2BAAM;AAAC,iBAAQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAAmB,SA3BrC;AA6BN,QAAA,UAAU,EAAE,sBAAM;AAAC,iBAAQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAAmB,SA7BhC;AA+BN,QAAA,eAAe,EAAI,2BAAM;AAAC,iBAAQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAAmB,SA/BvC;AAiCN,QAAA,aAAa,EAAE,uBAACE,EAAD,EAAKC,EAAL,EAAY;AAAC,iBAAOD,EAAE,CAACE,IAAH,KAAYD,EAAE,CAACC,IAAtB;AAA2B,SAjCjD;AAmCN,QAAA,QAAQ,EAAE,IAnCJ;AAqCN,QAAA,WAAW,EAAE;AACX,wBAAc;AAACC,YAAAA,QAAQ,EAAE,IAAX;AAAiBC,YAAAA,MAAM,EAAE;AAAzB,WADH;AAEX,wBAAc;AAACA,YAAAA,MAAM,EAAE;AAAT,WAFH;AAGX,wBAAc;AAACC,YAAAA,QAAQ,EAAE;AAAX;AAHH,SArCP;AA2CN,QAAA,iBAAiB,EAAE,IA3Cb;AA6CN,QAAA,SAAS,EAAE;AAAA,iBAAMX,OAAO,CAACC,GAAR,CAAY,eAAZ,CAAN;AAAA,SA7CL;AA+CN,QAAA,UAAU,EAAE,KA/CN;AAiDN,QAAA,cAAc,EAAE,IAjDV;AAmDN,QAAA,KAAK,EAAE;AACLW,UAAAA,kBAAkB,EAAE,QADf;AAELC,UAAAA,iBAAiB,EAAE,OAFd;AAGLC,UAAAA,gBAAgB,EAAE,KAHb;AAILC,UAAAA,eAAe,EAAE;AAJZ,SAnDD;AA0DN,QAAA,KAAK,EAAE,EA1DD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAqGD;;;;EAvGqClB,KAAK,CAACmB,S;;SAAzBlB,U","sourcesContent":["import { CalendarList, Agenda} from 'react-native-calendars'; // 1.5.3\r\nimport { View } from 'react-native';\r\nimport React from 'react';\r\n\r\nexport default class Calendario extends React.Component {\r\n  render() {\r\n    return (\r\n        <Agenda\r\n  // The list of items that have to be displayed in agenda. If you want to render item as empty date\r\n  // the value of date key has to be an empty array []. If there exists no value for date key it is\r\n  // considered that the date in question is not yet loaded\r\n  // Callback that gets called when items for a certain month should be loaded (month became visible)\r\n  loadItemsForMonth={(month) => {console.log('trigger items loading')}}\r\n  // Callback that fires when the calendar is opened or closed\r\n  onCalendarToggled={(calendarOpened) => {console.log(calendarOpened)}}\r\n  // Callback that gets called on day press\r\n  onDayPress={(day)=>{console.log('day pressed')}}\r\n  // Callback that gets called when day changes while scrolling agenda list\r\n  onDayChange={(day)=>{console.log('day changed')}}\r\n  // Initially selected day\r\n  selected={'2012-05-16'}\r\n  // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n  minDate={'2012-05-10'}\r\n  // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n  maxDate={'2012-05-30'}\r\n  // Max amount of months allowed to scroll to the past. Default = 50\r\n  pastScrollRange={50}\r\n  // Max amount of months allowed to scroll to the future. Default = 50\r\n  futureScrollRange={50}\r\n  // Specify how each item should be rendered in agenda\r\n  renderItem={(item, firstItemInDay) => {return (<View />);}}\r\n  // Specify how each date should be rendered. day can be undefined if the item is not first in that day.\r\n  renderDay={(day, item) => {return (<View />);}}\r\n  // Specify how empty date content with no items should be rendered\r\n  renderEmptyDate={() => {return (<View />);}}\r\n  // Specify how agenda knob should look like\r\n  renderKnob={() => {return (<View />);}}\r\n  // Specify what should be rendered instead of ActivityIndicator\r\n  renderEmptyData = {() => {return (<View />);}}\r\n  // Specify your item comparison function for increased performance\r\n  rowHasChanged={(r1, r2) => {return r1.text !== r2.text}}\r\n  // Hide knob button. Default = false\r\n  hideKnob={true}\r\n  // By default, agenda dates are marked if they have at least one item, but you can override this if needed\r\n  markedDates={{\r\n    '2012-05-16': {selected: true, marked: true},\r\n    '2012-05-17': {marked: true},\r\n    '2012-05-18': {disabled: true}\r\n  }}\r\n  // If disabledByDefault={true} dates flagged as not disabled will be enabled. Default = false\r\n  disabledByDefault={true}\r\n  // If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly.\r\n  onRefresh={() => console.log('refreshing...')}\r\n  // Set this true while waiting for new data from a refresh\r\n  refreshing={false}\r\n  // Add a custom RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView.\r\n  refreshControl={null}\r\n  // Agenda theme\r\n  theme={{\r\n    agendaDayTextColor: 'yellow',\r\n    agendaDayNumColor: 'green',\r\n    agendaTodayColor: 'red',\r\n    agendaKnobColor: 'blue'\r\n  }}\r\n  // Agenda container style\r\n  style={{}}\r\n/>\r\n   /*   <View style={{ backgroundColor: '#ffac47'}}>\r\n        <CalendarList\r\n        calendarWidth={320}\r\n          firstDay={1}\r\n\r\n          style= {{\r\n            borderWidth: 0,\r\n            borderColor: '#ffac47',\r\n            height: 1000\r\n          }}\r\n        // Specify theme properties to override specific styles for calendar parts. Default = {}\r\n        theme={{\r\n            backgroundColor: '#ffac47',\r\n            calendarBackground: '#ffac47',\r\n            textSectionTitleColor: '#b6c1cd',\r\n            textSectionTitleDisabledColor: '#d9e1e8',\r\n            selectedDayBackgroundColor: '#00adf5',\r\n            selectedDayTextColor: 'red',\r\n            todayTextColor: '#00adf5',\r\n            disabledArrowColor: 'red',\r\n            textDisabledColor: '#d9e1e8',\r\n            dotColor: '#00adf5',\r\n            selectedDotColor: '#ffffff',\r\n            arrowColor: 'white',\r\n            monthTextColor: 'blue',\r\n            indicatorColor: 'blue',\r\n            dayTextColor: 'blue',\r\n            textDayFontFamily: 'monospace',\r\n            textMonthFontFamily: 'monospace',\r\n            textDayHeaderFontFamily: 'monospace',\r\n            textDayFontWeight: '300',\r\n            textMonthFontWeight: 'bold',\r\n            textDayHeaderFontWeight: '300',\r\n            textDayFontSize: 25,\r\n            textMonthFontSize: 25,\r\n            textDayHeaderFontSize: 25\r\n        }}\r\n        />\r\n      </View> */\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}